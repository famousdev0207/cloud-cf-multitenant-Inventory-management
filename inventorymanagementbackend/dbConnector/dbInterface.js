// PSQL Library for node
var pg = require('pg');

// We get environment variables of the current application
var VCAPServices = JSON.parse(process.env.VCAP_SERVICES);

// When we bind a PSQL service to our application (done in the mta.yaml file),
// The service details are addedd to the application's environment variables.
// We access the the DB details (such as hostname, password, port etc.) from the VCAP services.
var PGConfig = VCAPServices.postgresql[0];

var config = {
	host: PGConfig.credentials.hostname, // Server hosting the postgres database
	database: PGConfig.credentials.dbname, //env var: PGDATABASE
	user: PGConfig.credentials.username, //env var: PGUSER
	password: PGConfig.credentials.password, //env var: PGPASSWORD
	port: PGConfig.credentials.port, //env var: PGPORT
	max: 10, // max number of clients in the pool (10)
	idleTimeoutMillis: 30000 // how long a client is allowed to remain idle before being closed (30 seconds)
};

//This initializes a connection pool with the specified configuration.
var pool = new pg.Pool(config);

/**
 * Checks if a table with name "products" exists. If the table doesn't exist, it creates a table.
 */
var psqlCreateTable = function () {

	//Prepare the create table query.
	var createProductsTableQuery = "CREATE TABLE IF NOT EXISTS products ( " +
		"product_id serial CONSTRAINT product_id PRIMARY KEY," +
		"product_name varchar(150) NOT NULL," +
		"product_description varchar(500)," +
		"supplier_name varchar(150) NOT NULL," +
		"price  float NOT NULL," +
		"available boolean NOT NULL," +
		"quantity int," +
		"tenant_id varchar (100) NOT NULL" +
		")";

	//Note: The product id is auto generated by the DB Table

	//Request the pool for a client connection and execute our query
	pool.connect().then(client => {
		client.query(createProductsTableQuery).then(res => {
			console.log(res);
			client.release();
		}).catch(e => {
			client.release();
			console.error('Query error: ', e.message, e.stack);
		});
	});
};

/**
 * Add a new product with the following details.
 * @param  {} name - Name of the product
 * @param  {} description - Short description of the product
 * @param  {} supplier - Supplier's name for the product
 * @param  {} price - Shelf price of the product
 * @param  {} availability - Availability of the product
 * @param  {} quantity - Quantity of the product
 * @param  {} tenantId - Subscriber's tenant id
 * @param  {} callback - Callback
 */
var psqlInsertValues = function (name, description, supplier, price, availability, quantity, tenantId, callback) {

	//Prepare the insert query.
	var insertValuesIntoProductsTableQuery =
		"INSERT INTO products (\"product_name\",\"product_description\",\"supplier_name\",\"price\",\"available\",\"quantity\",\"tenant_id\")" +
		"VALUES($1,$2,$3,$4,$5,$6,$7);";

	//Request the pool for a client connection and execute our query
	return pool.connect().then(client => {
		client.query(insertValuesIntoProductsTableQuery, [name, description, supplier, price, availability, quantity, tenantId]).then(res => {
			console.log(res);
			client.release();
			callback('success');
		}).catch(e => {
			console.error('Query error: ', e.message, e.stack);
			client.release();
			callback('failure');
		});
	});

};

/**
 * Fetch all the records in the products table where the tenant id matches.
 * @param  {} tenantId - Tenant id of the subscriber
 * @param  {} callback - Callback
 */
var psqlSelectTenantProducts = function (tenantId, callback) {
	//Prepare the insert query.
	var selectMyProductsQuery = "SELECT * FROM products WHERE \"tenant_id\" = $1";

	//Request the pool for a client connection and execute our query
	return pool.connect().then(client => {
		return client.query(selectMyProductsQuery, [tenantId]).then(function (result) {
			console.log(result);
			callback(result.rows);
			client.release();
		}).catch(e => {
			client.release();
			console.error('Query error: ', e.message, e.stack);
		});
	});
};

/* #region PSQL Test Methods */
// // Uncomment the following code for additional DB help methods.
// // Note: you will have to uncomment the changes in index.js and in the module.exports section of this file.

// /**
//  * Fetches all the records in the products table
//  * @param  {} callback - Callback
//  */
// var psqlTestSelectAllProducts = function (callback) {
// 	var selectAllProductsQuery = "SELECT * FROM products";

// 	return pool.connect().then(client => {
// 		return client.query(selectAllProductsQuery).then(function (result) {
// 			console.log(result);
// 			callback(result.rows);
// 			client.release();
// 		}).catch(e => {
// 			client.release();
// 			console.error('Query error: ', e.message, e.stack);
// 		});
// 	});
// };

// /**
//  * Deletes the products table
//  */
// var psqlTestDropProductTables = function () {
// 	var dropTableQuery = "DROP TABLE products;";

// 	return pool.connect().then(client => {
// 		client.query(dropTableQuery).then(res => {
// 			console.log("***Deleted products table successfully***");
// 			client.release();
// 		}).catch(e => {
// 			client.release();
// 			console.error('Query error: ', e.message, e.stack);
// 		});
// 	});
// };

// /**
//  * Delete a specific product with proudct id as following
//  * @param  {} productId - product Id of the product that needs to be deleted
//  */
// var psqlTestDeleteValues = function (productId) {
// 	var deleteValuesForIdQuery = "DELETE FROM products WHERE products.product_id = $1";

// 	pool.connect().then(client => {
// 		client.query(deleteValuesForIdQuery, [productId]).then(res => {
// 			console.log(res);
// 			client.release();
// 		}).catch(e => {
// 			client.release();
// 			console.error('Query error: ', e.message, e.stack);
// 		});
// 	});

// };

/* #endregion */

module.exports = {
	// deleteValues: psqlTestDeleteValues,
	// selectAllProducts: psqlTestSelectAllProducts,
	// dropTable: psqlTestDropProductTables,
	createTable: psqlCreateTable,
	insertValues: psqlInsertValues,
	selectMyProducts: psqlSelectTenantProducts
};